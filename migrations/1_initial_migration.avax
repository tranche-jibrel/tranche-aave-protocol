require('dotenv').config();
const { deployProxy, upgradeProxy } = require('@openzeppelin/truffle-upgrades');

var JFeesCollector = artifacts.require("JFeesCollector");
var JAdminTools = artifacts.require("JAdminTools");

var JAave = artifacts.require('JAave');
var JTranchesDeployer = artifacts.require('JTranchesDeployer');

var JTrancheAToken = artifacts.require('JTrancheAToken');
var JTrancheBToken = artifacts.require('JTrancheBToken');

// var WETHToken = artifacts.require('WETH9_');
var WETHGateway = artifacts.require('WETHGateway');

//const ZERO_ADDRESS = "0x0000000000000000000000000000000000000000";
// const ETH_ADDRESS = "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE";
const AVAX_ADDRESS = "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE";
const WETH_E_ADDRESS = "0x49d5c2bdffac6ce2bfdb6640f4f80f226bc10bab"; // AVAX mainnet
// const DAI_ADDRESS = '0xFf795577d9AC8bD7D90Ee22b6C1703490b6512FD';
const DAI_E_ADDRESS = '0xd586e7f844cea2f87f50152665bcbc2c279d8d70';
const WBTC_E_ADDRESS = '0x50b7545627a5162f82a992c33b87adc75187b218';
const WAVAX_ADDRESS = "0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7";
const USDC_E_ADDRESS = "0xa7d7079b0fead91f3e65f86e8915cb59c1a4c664";

// const LendingPoolAddressesProvider = '0x88757f2f99175387aB4C6a4b3067c77A695b0349';
const LendingPoolAddressesProvider = '0xb6A86025F0FE1862B372cb0ca18CE3EDe02A318f'; // AVAX mainnet
const aWETH_Address = '0x87b1f4cf9BD63f7BBD3eE1aD04E8F52540349347';
const avWAVAX_Address = '0xDFE521292EcE2A4f44242efBcD66Bc594CA9714B';
const avWETH_Address = '0x53f7c5869a859F0AeC3D334ee8B4Cf01E3492f21';
const aDAI_Address = '0xdCf0aF9e59C002FA3AA091a46196b37530FD48a8';
const avDAI_Address = '0x47AFa96Cdc9fAb46904A55a6ad4bf6660B53c38a';
const avWBCT_Address = '0x686bEF2417b6Dc32C50a3cBfbCC3bb60E1e9a15D';
const avUSDC_Address = '0x46A51127C3ce23fb7AB1DE06226147F446e4a857';
// const aaveIncentiveController = '0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5';
const aaveIncentiveController = '0x01D83Fe6A10D2f2B7AF17034343746188272cAc9';  // AVAX Mainnet

module.exports = async (deployer, network, accounts) => {

  if (network == "development") {
    const factoryOwner = accounts[0];

    const JATinstance = await deployProxy(JAdminTools, [], { from: factoryOwner });
    console.log('JAdminTools Deployed: ', JATinstance.address);

    const JFCinstance = await deployProxy(JFeesCollector, [JATinstance.address], { from: factoryOwner });
    console.log('JFeesCollector Deployed: ', JFCinstance.address);

    const JTDeployer = await deployProxy(JTranchesDeployer, [], { from: factoryOwner });
    console.log("Tranches Deployer: " + JTDeployer.address);

    const JAinstance = await deployProxy(JAave, [JATinstance.address, JFCinstance.address, JTDeployer.address,
      aaveIncentiveController, WAVAX_ADDRESS, 31536000], { from: factoryOwner });
    console.log('JAave Deployed: ', JAinstance.address);

    await deployer.deploy(WETHGateway, WAVAX_ADDRESS, JAinstance.address);
    const JWGinstance = await WETHGateway.deployed();
    console.log('WETHGateway Deployed: ', JWGinstance.address);

    await JATinstance.addAdmin(JAinstance.address, { from: factoryOwner })
    await JATinstance.addAdmin(JTDeployer.address, { from: factoryOwner })

    await JAinstance.setAavePoolAddressProvider(LendingPoolAddressesProvider, { from: factoryOwner })
    await JAinstance.setWETHGatewayAddress(JWGinstance.address, { from: factoryOwner });

    await JTDeployer.setJAaveAddresses(JAinstance.address, JATinstance.address, { from: factoryOwner });

    await JAinstance.addTrancheToProtocol(AVAX_ADDRESS, avWAVAX_Address, "jAvaxTrancheAToken", "JAA", "jAVAXTrancheBToken", "JAB", web3.utils.toWei("0.04", "ether"), 18, { from: factoryOwner });
    trParams = await JAinstance.trancheAddresses(0);
    let EthTrA = await JTrancheAToken.at(trParams.ATrancheAddress);
    console.log("AVAX Tranche A Token Address: " + EthTrA.address);
    let EthTrB = await JTrancheBToken.at(trParams.BTrancheAddress);
    console.log("AVAX Tranche B Token Address: " + EthTrB.address);

    await JAinstance.setTrancheDeposit(0, true);

    await JAinstance.addTrancheToProtocol(DAI_E_ADDRESS, avDAI_Address, "jDaiTrancheAToken", "JDA", "jDaiTrancheBToken", "JDB", web3.utils.toWei("0.03", "ether"), 18, { from: factoryOwner });
    trParams = await JAinstance.trancheAddresses(1);
    let DaiTrA = await JTrancheAToken.at(trParams.ATrancheAddress);
    console.log("DAI Tranche A Token Address: " + DaiTrA.address);
    let DaiTrB = await JTrancheBToken.at(trParams.BTrancheAddress);
    console.log("DAI Tranche B Token Address: " + DaiTrB.address);

    await JAinstance.setTrancheDeposit(1, true);

    await JAinstance.addTrancheToProtocol(WBTC_E_ADDRESS, avWBCT_Address, "jWBTCTrancheAToken", "JWBA", "jWBTCTrancheBToken", "JWBB", web3.utils.toWei("0.03", "ether"), 8, { from: factoryOwner });
    trParams = await JAinstance.trancheAddresses(2);
    let WbtcTrA = await JTrancheAToken.at(trParams.ATrancheAddress);
    console.log("WBTC Tranche A Token Address: " + WbtcTrA.address);
    let WbtcTrB = await JTrancheBToken.at(trParams.BTrancheAddress);
    console.log("WBTC Tranche B Token Address: " + WbtcTrB.address);

    await JAinstance.setTrancheDeposit(2, true);

    await JAinstance.addTrancheToProtocol(USDC_E_ADDRESS, avUSDC_Address, "jUSDCTrancheAToken", "JUBA", "jUSDCTrancheBToken", "JUBB", web3.utils.toWei("0.03", "ether"), 6, { from: factoryOwner });
    trParams = await JAinstance.trancheAddresses(3);
    let UsdcTrA = await JTrancheAToken.at(trParams.ATrancheAddress);
    console.log("USDC Tranche A Token Address: " + UsdcTrA.address);
    let UsdcTrB = await JTrancheBToken.at(trParams.BTrancheAddress);
    console.log("USDC Tranche B Token Address: " + UsdcTrB.address);

    await JAinstance.setTrancheDeposit(3, true);

  } else if (network == "kovan") {
    const factoryOwner = accounts[0];

    const DAI_KOVAN = "0xFf795577d9AC8bD7D90Ee22b6C1703490b6512FD";
    const aDAI_KOVAN = "0xdCf0aF9e59C002FA3AA091a46196b37530FD48a8";
    const WETH_KOVAN = "0xa1c74a9a3e59ffe9bee7b85cd6e91c0751289ebd";

    const JATinstance = await deployProxy(JAdminTools, [], { from: factoryOwner });
    console.log('JAdminTools Deployed: ', JATinstance.address);

    const JFCinstance = await deployProxy(JFeesCollector, [JATinstance.address], { from: factoryOwner });
    console.log('JFeesCollector Deployed: ', JFCinstance.address);

    const JTDeployer = await deployProxy(JTranchesDeployer, [], { from: factoryOwner });
    console.log("Tranches Deployer: " + JTDeployer.address);

    const JAinstance = await deployProxy(JAave, [JATinstance.address, JFCinstance.address, JTDeployer.address,
      aaveIncentiveController, WAVAX_ADDRESS, 31536000], { from: factoryOwner });
    console.log('JAave Deployed: ', JAinstance.address);

// const mySLICEinstance = "0x1be5C8a2F45FC761cF44eA21c8F028A08a6F5Fc7";
// const JATinstance = await JAdminTools.at("0xB80a92307F6c6D1FE8c72c0f011bCE8Ff69816a8");
// const JFCinstance =  "0x3B06764a721A07eDe0Bb312a803503779e221592";
// const JTDeployer = await JTranchesDeployer.at("0xEb458b53b6C651727a59103B90E827455016aE4b");
// const JAinstance = await JAave.at("0x1dcE6fEf3B3FaDF907F9F17ECCFd4eCc8aB26Be9");

    await deployer.deploy(WETHGateway, WETH_KOVAN, JAinstance.address);
    const JWGinstance = await WETHGateway.deployed();
    console.log('WETHGateway Deployed: ', JWGinstance.address);

    // await JWGinstance.setJAaveAddress(JAinstance.address, { from: factoryOwner })

    await JATinstance.addAdmin(JAinstance.address, { from: factoryOwner })
    await JATinstance.addAdmin(JTDeployer.address, { from: factoryOwner })

    await JAinstance.setAavePoolAddressProvider(LendingPoolAddressesProvider, { from: factoryOwner })
    await JAinstance.setWETHGatewayAddress(JWGinstance.address, { from: factoryOwner });

    await JTDeployer.setJAaveAddresses(JAinstance.address, JATinstance.address, { from: factoryOwner });
/*
    await JAinstance.addTrancheToProtocol(AVAX_ADDRESS, avWAVAX_Address, "jAvaxTrancheAToken", "JAA", "jAVAXTrancheBToken", "JAB", web3.utils.toWei("0.04", "ether"), 18, { from: factoryOwner });
    trParams = await JAinstance.trancheAddresses(0);
    let EthTrA = await JTrancheAToken.at(trParams.ATrancheAddress);
    console.log("AVAX Tranche A Token Address: " + EthTrA.address);
    let EthTrB = await JTrancheBToken.at(trParams.BTrancheAddress);
    console.log("AVAX Tranche B Token Address: " + EthTrB.address);

    await JAinstance.setTrancheDeposit(0, true);
*/
    await JAinstance.addTrancheToProtocol(DAI_KOVAN, aDAI_KOVAN, "jDaiTrancheAToken", "JDA", "jDaiTrancheBToken", "JDB", web3.utils.toWei("0.03", "ether"), 18, { from: factoryOwner });
    trParams = await JAinstance.trancheAddresses(0);
    let DaiTrA = await JTrancheAToken.at(trParams.ATrancheAddress);
    console.log("DAI Tranche A Token Address: " + DaiTrA.address);
    let DaiTrB = await JTrancheBToken.at(trParams.BTrancheAddress);
    console.log("DAI Tranche B Token Address: " + DaiTrB.address);

    await JAinstance.setTrancheDeposit(0, true);
/*
    await JAinstance.addTrancheToProtocol(WBTC_E_ADDRESS, avWBCT_Address, "jWBTCTrancheAToken", "JWBA", "jWBTCTrancheBToken", "JWBB", web3.utils.toWei("0.03", "ether"), 8, { from: factoryOwner });
    trParams = await JAinstance.trancheAddresses(2);
    let WbtcTrA = await JTrancheAToken.at(trParams.ATrancheAddress);
    console.log("WBTC Tranche A Token Address: " + WbtcTrA.address);
    let WbtcTrB = await JTrancheBToken.at(trParams.BTrancheAddress);
    console.log("WBTC Tranche B Token Address: " + WbtcTrB.address);

    await JAinstance.setTrancheDeposit(2, true);
*/
  } else if (network === 'matic') {
    let { AAVE_POOL, MATIC_ADDRESS, WMATIC_ADDRESS, amWMATIC_ADDRESS, USDC_ADDRESS, amUSDC_ADDRESS,
      DAI_ADDRESS, amDAI_ADDRESS, ADMIN_TOOLS, FEE_COLLECTOR_ADDRESS, } = process.env;
    const factoryOwner = accounts[0];

    let JATinstance = null;
    let JFCinstance = null;
    if (!ADMIN_TOOLS) {
      JATinstance = await deployProxy(JAdminTools, [], { from: factoryOwner });
      console.log('JAdminTools Deployed: ', JATinstance.address);
    } else {
      JATinstance = {
        address: ADMIN_TOOLS
      }
    }
    if (!FEE_COLLECTOR_ADDRESS) {
      JFCinstance = await deployProxy(JFeesCollector, [JATinstance.address], { from: factoryOwner });
      console.log('JFeesCollector Deployed: ', JFCinstance.address);
    } else {
      JFCinstance = {
        address: FEE_COLLECTOR_ADDRESS
      }
    }

    const JTDeployer = await deployProxy(JTranchesDeployer, [], { from: factoryOwner });
    console.log("AAVE_DEPLOYER " + JTDeployer.address);

    const JAinstance = await deployProxy(JAave, [JATinstance.address, JFCinstance.address, JTDeployer.address,
      '0x357D51124f59836DeD84c8a1730D72B749d8BC23', WMATIC_ADDRESS, 15768000], { from: factoryOwner });
    console.log('AAVE_TRANCHE_ADDRESS', JAinstance.address);

    await deployer.deploy(WETHGateway, WMATIC_ADDRESS, JAinstance.address);
    const JWGinstance = await WETHGateway.deployed();
    console.log('WETH_GATEWAY', JWGinstance.address);

    // const JTDeployer = await JTranchesDeployer.at('0x68310EbB80883AbcB2bCd87A28855447d0CafeD1');
    await JTDeployer.setJAaveAddress(JAinstance.address, { from: factoryOwner });
    console.log('aave deployer 1');
    await JAinstance.setWETHGatewayAddress(JWGinstance.address, { from: factoryOwner });
    console.log('aave deployer 2');


    await JAinstance.setAavePoolAddressProvider(AAVE_POOL, { from: factoryOwner });
    console.log('aave deployer 3');

    await JAinstance.addTrancheToProtocol(MATIC_ADDRESS, amWMATIC_ADDRESS, "Tranche A - Aave Polygon MATIC", "aamMATIC", "Tranche B - Aave Polygon MATIC", "bamMATIC", web3.utils.toWei("0.03", "ether"), 18, { from: factoryOwner });
    await JAinstance.setTrancheDeposit(0, true, { from: factoryOwner });
    console.log('added tranche 1')
    await JAinstance.addTrancheToProtocol(DAI_ADDRESS, amDAI_ADDRESS, "Tranche A - Aave Polygon DAI", "aamDAI", "Tranche B - Aave Polygon DAI", "bamDAI", web3.utils.toWei("0.03", "ether"), 18, { from: factoryOwner });
    await JAinstance.setTrancheDeposit(1, true, { from: factoryOwner });
    console.log('added tranche 2')
    await JAinstance.addTrancheToProtocol(USDC_ADDRESS, amUSDC_ADDRESS, "Tranche A - Aave Polygon USDC", "aamUSDC", "Tranche B - Aave Polygon USDC", "bamUSDC", web3.utils.toWei("0.03", "ether"), 6, { from: factoryOwner });
    await JAinstance.setTrancheDeposit(2, true, { from: factoryOwner });
    console.log('added tranche 3');

    trParams = await JAinstance.trancheAddresses(0);
    let MaticTrA = await JTrancheAToken.at(trParams.ATrancheAddress);
    let MaticTrB = await JTrancheBToken.at(trParams.BTrancheAddress);
    trParams = await JAinstance.trancheAddresses(1);
    let DaiTrA = await JTrancheAToken.at(trParams.ATrancheAddress);
    let DaiTrB = await JTrancheBToken.at(trParams.BTrancheAddress);
    trParams = await JAinstance.trancheAddresses(2);
    let USDCTrA = await JTrancheAToken.at(trParams.ATrancheAddress);
    let USDCTrB = await JTrancheBToken.at(trParams.BTrancheAddress);

    console.log(`REACT_APP_AAVE_TRANCHE_TOKENS=${MaticTrA.address},${MaticTrB.address},${DaiTrA.address},${DaiTrB.address},${USDCTrA.address},${USDCTrB.address}`)
  } else if (network === 'avaxtest') {
    let { AAVE_POOL, ADMIN_TOOLS, FEE_COLLECTOR_ADDRESS, WETH_GATEWAY, AVAX_ADDRESS, WAVAX_ADDRESS, AAVE_INCENTIVE_ADDRESS, MOCK_INCENTIVE_CONTROLLER,
      aavaWAVAX_ADDRESS, WETH_ADDRESS, aavaWETH_ADDRESS, WBTC_ADDRESS, aavaWBTC_ADDRESS } = process.env;
    const factoryOwner = accounts[0];

    let JATinstance = null;
    let JFCinstance = null;
    let JWGinstance = null
    if (!ADMIN_TOOLS) {
      JATinstance = await deployProxy(JAdminTools, [], { from: factoryOwner });
      console.log('JAdminTools Deployed: ', JATinstance.address);
    } else {
      JATinstance = await JAdminTools.at(ADMIN_TOOLS);
    }
    if (!FEE_COLLECTOR_ADDRESS) {
      JFCinstance = await deployProxy(JFeesCollector, [JATinstance.address], { from: factoryOwner });
      console.log('JFeesCollector Deployed: ', JFCinstance.address);
    } else {
      JFCinstance = {
        address: FEE_COLLECTOR_ADDRESS
      }
    }

    const JTDeployer = await deployProxy(JTranchesDeployer, [], { from: factoryOwner });
    console.log("AAVE_DEPLOYER " + JTDeployer.address);

    const JAinstance = await deployProxy(JAave, [JATinstance.address, JFCinstance.address, JTDeployer.address,
      AAVE_INCENTIVE_ADDRESS, WAVAX_ADDRESS, 31557600], { from: factoryOwner });
    console.log('AAVE_TRANCHE_ADDRESS', JAinstance.address);

    await JTDeployer.setJAaveAddresses(JAinstance.address, JATinstance.address, { from: factoryOwner });
    console.log('aave deployer 1');
    await JATinstance.addAdmin(JTDeployer.address, { from: factoryOwner })

    if (!WETH_GATEWAY) {
      await deployer.deploy(WETHGateway, WAVAX_ADDRESS, JAinstance.address);
      JWGinstance = await WETHGateway.deployed();
      await JWGinstance.setJAaveAddress(JAinstance.address);
      console.log('WETH_GATEWAY', JWGinstance.address);
    } else {
      JWGinstance = await WETHGateway.at(WETH_GATEWAY)
      await JWGinstance.setJAaveAddress(JAinstance.address);
    }

    await JWGinstance.setJAaveAddress(JAinstance.address, { from: factoryOwner })

    await JAinstance.setWETHGatewayAddress(JWGinstance.address, { from: factoryOwner });
    console.log('aave deployer 2');

    await JAinstance.setAavePoolAddressProvider(AAVE_POOL, { from: factoryOwner });
    console.log('aave deployer 3');

    await JATinstance.addAdmin(JAinstance.address, { from: factoryOwner })

    await JAinstance.addTrancheToProtocol(AVAX_ADDRESS, aavaWAVAX_ADDRESS, "Tranche A - Aave Avalanche AVAX", "aavWAVAX", "Tranche B - Aave Avalanche AVAX", "bavWAVAX", web3.utils.toWei("0.03", "ether"), 18, { from: factoryOwner });
    await JAinstance.setTrancheDeposit(0, true, { from: factoryOwner });
    console.log('added tranche 1')

    await JAinstance.addTrancheToProtocol(WETH_ADDRESS, aavaWETH_ADDRESS, "Tranche A - Aave Avalanche WETH", "aavWETH", "Tranche B - Aave Avalanche WETH", "bavWETH", web3.utils.toWei("0.02", "ether"), 18, { from: factoryOwner });
    await JAinstance.setTrancheDeposit(1, true, { from: factoryOwner });
    console.log('added tranche 2')

    await JAinstance.addTrancheToProtocol(WBTC_ADDRESS, aavaWBTC_ADDRESS, "Tranche A - Aave Avalanche WBTC", "aavWBTC", "Tranche B - Aave Avalanche WBTC", "bavWBTC", web3.utils.toWei("0.002", "ether"), 8, { from: factoryOwner });
    await JAinstance.setTrancheDeposit(2, true, { from: factoryOwner });
    console.log('added tranche 3');

    trParams = await JAinstance.trancheAddresses(0);
    let tranche1A = await JTrancheAToken.at(trParams.ATrancheAddress);
    let tranche1B = await JTrancheBToken.at(trParams.BTrancheAddress);
    trParams = await JAinstance.trancheAddresses(1);
    let tranche2A = await JTrancheAToken.at(trParams.ATrancheAddress);
    let tranche2B = await JTrancheBToken.at(trParams.BTrancheAddress);
    trParams = await JAinstance.trancheAddresses(2);
    let tranche3A = await JTrancheAToken.at(trParams.ATrancheAddress);
    let tranche3B = await JTrancheBToken.at(trParams.BTrancheAddress);

    console.log(`REACT_APP_AAVE_TRANCHE_TOKENS=${tranche1A.address},${tranche2A.address},${tranche3A.address},
    ${tranche1B.address},${tranche2B.address},${tranche3B.address}`)
  }
  else if (network === 'avaxmainnet') {
    let { AAVE_POOL, ADMIN_TOOLS, FEE_COLLECTOR_ADDRESS, WETH_GATEWAY, AAVE_INCENTIVE_ADDRESS, MOCK_INCENTIVE_CONTROLLER, WAVAX_ADDRESS,
      AVAX_ADDRESS, avWAVAX_ADDRESS,
      WETH_ADDRESS, avWETH_ADDRESS,
      WBTC_ADDRESS, avWBTC_ADDRESS,
      DAI_ADDRESS, avDAI_ADDRESS,
      USDT_ADDRESS, avUSDT_ADDRESS,
      USDC_ADDRESS, avUSDC_ADDRESS,
      AAVE_ADDRESS, avAAVE_ADDRESS
    } = process.env;
    const factoryOwner = accounts[0];

    let JATinstance = null;
    let JFCinstance = null;
    let JWGinstance = null
    if (!ADMIN_TOOLS) {
      JATinstance = await deployProxy(JAdminTools, [], { from: factoryOwner });
      console.log('JAdminTools Deployed: ', JATinstance.address);
    } else {
      JATinstance = await JAdminTools.at(ADMIN_TOOLS);
    }
    if (!FEE_COLLECTOR_ADDRESS) {
      JFCinstance = await deployProxy(JFeesCollector, [JATinstance.address], { from: factoryOwner });
      console.log('JFeesCollector Deployed: ', JFCinstance.address);
    } else {
      JFCinstance = {
        address: FEE_COLLECTOR_ADDRESS
      }
    }

    const JTDeployer = await deployProxy(JTranchesDeployer, [], { from: factoryOwner });
    console.log("AAVE_DEPLOYER " + JTDeployer.address);

    await JATinstance.addAdmin(JTDeployer.address, { from: factoryOwner })
    console.log('admin added 1');

    const JAinstance = await deployProxy(JAave, [JATinstance.address, JFCinstance.address, JTDeployer.address,
      AAVE_INCENTIVE_ADDRESS, WAVAX_ADDRESS, 31557600], { from: factoryOwner });
    console.log('AAVE_TRANCHE_ADDRESS', JAinstance.address);

    await JTDeployer.setJAaveAddresses(JAinstance.address, JATinstance.address, { from: factoryOwner });
    console.log('aave deployer 1');

    await JATinstance.addAdmin(JAinstance.address, { from: factoryOwner })
    console.log('admin added 2');

    if (!WETH_GATEWAY) {
      await deployer.deploy(WETHGateway, WAVAX_ADDRESS, JAinstance.address);
      JWGinstance = await WETHGateway.deployed();
      console.log('WETH_GATEWAY', JWGinstance.address);
      await JWGinstance.setJAaveAddress(JAinstance.address);
    } else {
      JWGinstance = await WETHGateway.at(WETH_GATEWAY)
      await JWGinstance.setJAaveAddress(JAinstance.address);
    }
    await JAinstance.setWETHGatewayAddress(JWGinstance.address, { from: factoryOwner });
    console.log('aave deployer 2');

    await JAinstance.setAavePoolAddressProvider(AAVE_POOL, { from: factoryOwner });
    console.log('aave deployer 3');

    //tranche 1  AVAX_ADDRESS,avWAVAX_ADDRESS, 0.2977%
    await JAinstance.addTrancheToProtocol(AVAX_ADDRESS, avWAVAX_ADDRESS, "Tranche A - Aave Avalanche AVAX", "aavWAVAX", "Tranche B - Aave Avalanche AVAX", "bavWAVAX", web3.utils.toWei("0.02977", "ether"), 18, { from: factoryOwner });
    await JAinstance.setTrancheDeposit(0, true, { from: factoryOwner });
    console.log('added tranche 1')

    //tranche 2  WETH_ADDRESS, avWETH_ADDRESS, 0.0%
    await JAinstance.addTrancheToProtocol(WETH_ADDRESS, avWETH_ADDRESS, "Tranche A - Aave Avalanche WETH", "aavWETH", "Tranche B - Aave Avalanche WETH", "bavWETH", web3.utils.toWei("0.00", "ether"), 18, { from: factoryOwner });
    await JAinstance.setTrancheDeposit(1, true, { from: factoryOwner });
    console.log('added tranche 2')

    //tranche 3  WBTC_ADDRESS, avWBTC_ADDRESS, 0.0%
    await JAinstance.addTrancheToProtocol(WBTC_ADDRESS, avWBTC_ADDRESS, "Tranche A - Aave Avalanche WBTC", "aavWBTC", "Tranche B - Aave Avalanche WBTC", "bavWBTC", web3.utils.toWei("0.00", "ether"), 8, { from: factoryOwner });
    await JAinstance.setTrancheDeposit(2, true, { from: factoryOwner });
    console.log('added tranche 3');

    //tranche 4  DAI_ADDRESS, avDAI_ADDRESS, 1.5912%
    await JAinstance.addTrancheToProtocol(DAI_ADDRESS, avDAI_ADDRESS, "Tranche A - Aave Avalanche DAI", "aavDAI", "Tranche B - Aave Avalanche DAI", "bavDAI", web3.utils.toWei("0.015912", "ether"), 18, { from: factoryOwner });
    await JAinstance.setTrancheDeposit(3, true, { from: factoryOwner });
    console.log('added tranche 4');

    //tranche 5  USDT_ADDRESS, avUSDT_ADDRESS,0%
    await JAinstance.addTrancheToProtocol(USDT_ADDRESS, avUSDT_ADDRESS, "Tranche A - Aave Avalanche USDT", "aavUSDT", "Tranche B - Aave Avalanche USDT", "bavUSDT", web3.utils.toWei("0.00", "ether"), 6, { from: factoryOwner });
    await JAinstance.setTrancheDeposit(4, true, { from: factoryOwner });
    console.log('added tranche 5');


    //tranche 6 USDC_ADDRESS, avUSDC_ADDRESS,0.5695%
    await JAinstance.addTrancheToProtocol(USDC_ADDRESS, avUSDC_ADDRESS, "Tranche A - Aave Avalanche USDC", "aavUSDC", "Tranche B - Aave Avalanche USDC", "bavUSDC", web3.utils.toWei("0.005695", "ether"), 6, { from: factoryOwner });
    await JAinstance.setTrancheDeposit(5, true, { from: factoryOwner });
    console.log('added tranche 6');

    //tranche 7 AAVE_ADDRESS, avAAVE_ADDRESS,0.0%
    await JAinstance.addTrancheToProtocol(AAVE_ADDRESS, avAAVE_ADDRESS, "Tranche A - Aave Avalanche AAVE", "aavAAVE", "Tranche B - Aave Avalanche AAVE", "bavAAVE", web3.utils.toWei("0.00", "ether"), 18, { from: factoryOwner });
    await JAinstance.setTrancheDeposit(6, true, { from: factoryOwner });
    console.log('added tranche 7');

    trParams = await JAinstance.trancheAddresses(0);
    let tranche1A = await JTrancheAToken.at(trParams.ATrancheAddress);
    let tranche1B = await JTrancheBToken.at(trParams.BTrancheAddress);
    trParams = await JAinstance.trancheAddresses(1);
    let tranche2A = await JTrancheAToken.at(trParams.ATrancheAddress);
    let tranche2B = await JTrancheBToken.at(trParams.BTrancheAddress);
    trParams = await JAinstance.trancheAddresses(2);
    let tranche3A = await JTrancheAToken.at(trParams.ATrancheAddress);
    let tranche3B = await JTrancheBToken.at(trParams.BTrancheAddress);

    trParams = await JAinstance.trancheAddresses(3);
    let tranche4A = await JTrancheAToken.at(trParams.ATrancheAddress);
    let tranche4B = await JTrancheBToken.at(trParams.BTrancheAddress);

    trParams = await JAinstance.trancheAddresses(4);
    let tranche5A = await JTrancheAToken.at(trParams.ATrancheAddress);
    let tranche5B = await JTrancheBToken.at(trParams.BTrancheAddress);

    trParams = await JAinstance.trancheAddresses(5);
    let tranche6A = await JTrancheAToken.at(trParams.ATrancheAddress);
    let tranche6B = await JTrancheBToken.at(trParams.BTrancheAddress);

    trParams = await JAinstance.trancheAddresses(6);
    let tranche7A = await JTrancheAToken.at(trParams.ATrancheAddress);
    let tranche7B = await JTrancheBToken.at(trParams.BTrancheAddress);

    console.log(`REACT_APP_AAVE_TRANCHE_TOKENS=${tranche1A.address},${tranche2A.address},${tranche3A.address},${tranche4A.address},${tranche5A.address},${tranche6A.address},${tranche7A.address},
    ${tranche1B.address},${tranche2B.address},${tranche3B.address},${tranche4B.address},${tranche5B.address},${tranche6B.address},${tranche7B.address}`)
  }
}